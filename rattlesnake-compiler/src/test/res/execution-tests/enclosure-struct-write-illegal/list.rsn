
datatype MutList

mut struct MutCons : MutList {
    rg: Region^,
    var head: Int,
    tail: MutList^{rg}
}

struct Nil : MutList

package Lists {

    fn sublist(r: Region^, ls: MutList^{r}, startIdx: Int) -> MutList^{r} {
        if startIdx < 0 {
            panic "negative index"
        } else if startIdx == 0 {
            return ls;
        } else if ls is MutCons {
            return sublist(r, ls.tail, startIdx - 1)
        } else if ls is Nil {
            panic "out of bounds"
        }
    }

    fn elemAt(r: Region^, ls: MutList^{r}, idx: Int) -> Int {
        val subL = sublist(r, ls, idx);
        if subL is MutCons {
            return subL.head
        } else {
            panic "out of bounds"
        }
    }

    // returns the old value
    fn replaceAt(r: Region^, ls: MutList^{r}, idx: Int, newVal: Int) -> Int {
        val subL = sublist(r, ls, idx);
        if subL is MutCons {
            val oldVal = subL.head;
            subL.head = newVal;
            return oldVal;
        } else {
            panic "out of bounds"
        }
    }

    fn mkList(rg: Region^, xs: arr^ Int) -> MutList^{rg} {
        var ls: MutList^{rg} = new Nil();
        for var i = len xs - 1; i >= 0; i -= 1 {
            ls = new@rg MutCons(rg, xs[i], ls);
        };
        return ls;
    }

}
