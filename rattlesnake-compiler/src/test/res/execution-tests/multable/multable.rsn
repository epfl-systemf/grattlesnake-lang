#nocap;

const cellWidth: Int = 5;

package Test {

    fn createMultiplicationTable(max: Int) -> arr(arr Int) {
        val table = arr(arr Int)[max];
        for var i = 1; i <= max; i += 1 {
            table[i-1] = arr Int[max];
            for var j = 1; j <= max; j += 1 {
                table[i-1][j-1] = i*j;
            }
        };
        return table
    }

    main fn test(arr String){
        val table = createMultiplicationTable(4);
        print(tableToString(table));
    }

    fn tableToString(table: arr arr Int) -> String {
        var s = "";
        for var l = 0; l < len table; l += 1 {
            val line = table[l];
            for var c = 0; c < len line; c += 1 {
                var cellStr = intToString(line[c]);
                cellStr = prepadTo(cellStr, cellWidth);
                s += cellStr;
            };
            s += "\n";
        };
        return s;
    }

    fn prepadTo(var s: String, n: Int) -> String {
        val padCnt = n - len s;
        for var i = 0; i < padCnt; i += 1 {
            s = " " + s;
        };
        return s;
    }
    
}
