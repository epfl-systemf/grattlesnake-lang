
mut datatype Tree {
    var value: Int
}

mut struct Fork : Tree {
    r: Region^,
    var left: Tree^{r},
    var value: Int,
    var right: Tree^{r}
}

mut struct Leaf : Tree {
    var value: Int
}

mut datatype Cell {
    var value: Int
}

datatype MemoInit {
    initValue: Int
}

mut datatype MemoLast {
    var lastValue: Int
}

mut datatype MemoLastAndInit : MemoLast, MemoInit {
    initValue: Int,
    var lastValue: Int
}

mut datatype CellWithMemoLastAndInit : Cell, MemoLastAndInit {
    var value: Int,
    initValue: Int,
    var lastValue: Int
}

datatype Messageable {
    msg: String
}

datatype TreeCell {
    r: Region^,
    tree: Tree^{r}
}

mut struct SimpleCell : Cell {
    var value: Int
}

mut struct CellWithMemoLastInitAndMsg : CellWithMemoLastAndInit, Messageable {
    var value: Int,
    initValue: Int,
    var lastValue: Int,
    msg: String
}

mut struct CellWithTree : Cell, TreeCell {
    var value: Int,
    r: Region^,
    tree: Leaf^{r}
}

package Test {

    main fn testF(arr String) {
        withreg r, s {
            val c1 = new@r CellWithMemoLastInitAndMsg(42, 9, 42, "Hello world");
            val c2: Cell^{r} = c1;
            val x = c2.value * c2.value;
            c2.value = -1;
            val c3 = new@r SimpleCell(c1.value + c1.initValue);
            val t = new@r Fork(r,
                        new@r Leaf(c2.value),
                        c3.value,
                        new@r Fork(r,
                            new@r Leaf(c1.initValue),
                            c1.lastValue,
                            new@r Leaf(74)
                        )
                    );
            Cells.setRightmost(t, 27);
            t.left = new@t.r Fork(t.r, new@t.r Leaf(x), (new@t.r SimpleCell(75)).value, t.left);
            val array = Cells.toArray(t, s);
            testArray([42*42, 75, -1, 8, 9, 42, 27], array);
        }
    }

    fn testArray(expected: arr Int, actual: arr^ Int){
        if len actual != len expected {
            panic "length mismatch"
        };
        for var idx = 0; idx < len actual; idx += 1 {
            console.print(when actual[idx] == expected[idx] then "PASSED\n" else "FAILED\n")
        }
    }

}

package Cells {
    
    fn treeSize(tree: Tree^) -> Int {
        return when tree is Fork
        then 1 + treeSize(tree.left) + treeSize(tree.right)
        else 1;
    }
    
    fn toArray(t: Tree^, arrayReg: Region^) -> arr^{arrayReg} Int {
        val size = treeSize(t);
        val array = arr@arrayReg Int[size];
        populateArray(t, array, 0);
        return array;
    }
    
    fn populateArray(t: Tree^, array: arr^ Int, var idx: Int) -> Int {
        if (t is Fork){
            idx = populateArray(t.left, array, idx);
        };
        array[idx] = t.value;
        idx += 1;
        if (t is Fork){
            idx = populateArray(t.right, array, idx);
        };
        return idx;
    }
    
    fn setRightmost(t: Tree^, n: Int){
        if (t is Fork){
            setRightmost(t.right, n);
        } else {
            t.value = n;
        }
    }
    
}
