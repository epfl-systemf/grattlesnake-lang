
package Test {

    main fn testFunc(arr String) {
        val opt = optionOf(42);
        printB(opt is Some && opt.value > 10);  // true
        printB(opt is Some && opt.value > 50);  // false
        printB(isEmpty(opt));                   // false
        printB(isEmpty(new None()));            // true
    }
    
    fn optionOf(i: Int) -> Option {
        return new Some(i);
    }
    
    fn isEmpty(opt: Option) -> Bool {
        return opt is None;
    }

    fn printB(b: Bool){
        print(boolToString(b) + "\n");
    }
    
}

interface Option {
}

struct Some : Option {
    value: Int
}

struct None : Option {
}
