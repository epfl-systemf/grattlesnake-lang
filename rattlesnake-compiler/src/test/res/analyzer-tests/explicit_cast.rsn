#nocap;

mut interface Super {
    var x: Int
}

mut struct Sub : Super {
    var x: Int,
    y: String
}

struct Indep {
    i: Int
}

interface I {}

package Test {

    fn create() -> Super {
        return new Sub(10, "Hello");
    }

    fn testFunc() -> String {
        val a = create() as Sub;
        val b: Super = a;
        var s = readY(a) + " ";     // s: "Hello "
        val e = a as String;  //> E : cannot cast 'Sub' to 'String'
        console.print(e);
        val f = a as Super;   //> W : useless conversion: 'Sub' --> 'Super'
        setX(f);
        val aPrime: Sub = a;
        val bPrime: Super = b;
        val g = aPrime as Indep;   //> E : cannot cast 'Sub' to 'Indep'
        val h = bPrime as Indep;   //> E : cannot cast 'Super' to 'Indep'
        console.print((g == h) as String);
        val i = aPrime as I;    //> E : cannot cast 'Sub' to 'I'
        val j = bPrime as I;    //> E : cannot cast 'Super' to 'I'
        console.print((i == j) as String);
        setX(b);
        s += readY(b as Sub);       // s: "Hello Hello"
        s += " ";                   // s: "Hello Hello "
        s += a.x as String;         // s: "Hello Hello 42"
        return s;
    }

    fn setX(s: Super){
        (s as Sub).x = 42;
    }

    fn setXSub(s: Sub){
        s.x = 50;
    }

    fn readY(s: Sub) -> String {
        return s.y;
    }

}
