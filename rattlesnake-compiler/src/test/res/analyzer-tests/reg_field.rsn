
package Main {

    main fn test(arr String){
        val r = newreg;
        val s = newreg;
        val foo = new@r Foo(42);
        val bar = new@s Bar(foo);   //> E : expected 'Foo^{s}', found 'Foo^{r}'
        doSomething(foo, bar);
    }

    fn doSomething(f: Foo^, b: Bar^) -> Region^ {
        console.print((f.i == b.f.i) as String);
        return f.reg;   //> E : reg field can only be used inside a capturing type, it cannot appear in executable position
    }

    fn mkBar(r: Region^) -> Bar^{r} {
        val f = new@r Foo(10);
        val b = new@r Bar(f);
        return b
    }

    fn mkBarBad(r: Region^, s: Region^) -> Bar^{r, s} {
        val f = new@r Foo(10);
        val b = new@s Bar(f);   //> E : expected 'Foo^{s}', found 'Foo^{r}'
        return b
    }

}

mut struct Foo {
    var i: Int
}

mut struct Bar {
    var f: Foo^{reg}
}
