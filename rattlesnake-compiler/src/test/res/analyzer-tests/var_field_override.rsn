
// TODO similar test case but with capture sets

interface Tree {
    id: Int,
    var value: Int
}

interface Fork : Tree {  //> E : 'value' should be reassignable in 'Fork' if and only if it is reassignable in its supertype 'Tree'
    id: Int,
    var left: Leaf,
    value: Int,
    right: Tree,
    prev: Fork
}

struct Fork1 : Fork { //> E : reassignable field 'left' should have the same type in 'Fork1' as in its supertype 'Fork'
    id: Int,
    var left: Fork,
    right: Leaf,    // OK
    value: Int,
    prev: Fork
}

struct Fork2 : Fork {  //> E : type 'Tree' of field 'prev' does not conform to its type 'Fork' in its supertype 'Fork'
    id: Int,
    var left: Leaf,
    value: Int,
    right: Tree,
    prev: Tree
}

struct Leaf : Tree {  //> E : 'id' should be reassignable in 'Leaf' if and only if it is reassignable in its supertype 'Tree'
    var id: Int,
    var value: Int
}
