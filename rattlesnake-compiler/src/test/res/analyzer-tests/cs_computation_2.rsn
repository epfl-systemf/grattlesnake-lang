//> allow-more-errors

package Test {

    fn foo(){
        val reg = newreg;
        var r1_var: R1^{fs} = R1;
        val r1: R1^{fs} = R1;
        var r3_var: R3^{R2} = R3;
        val r3: R3^{R2} = R3;
        val m1: M = new M(r1, r3_var);           //> E : local definition: expected 'M', found 'M^{R2, r1}'
        val m2: M = new M(r1, r3);               //> E : local definition: expected 'M', found 'M^{r1, r3}'
        val s1: S = new@reg S(r1_var, r3_var);   //> E : local definition: expected 'S', found 'S^{R2, console, fs, reg}'
        val s2: S = new@reg S(r1_var, r3);       //> E : local definition: expected 'S', found 'S^{R2, console, fs, reg}'
        val s3: S = new@reg S(r1, r3_var);       //> E : local definition: expected 'S', found 'S^{R2, console, r1, reg}'
        val s4: S = new@reg S(r1, r3);           //> E : local definition: expected 'S', found 'S^{R2, console, r1, reg}'
    }

}

package R1 {
    fn r(){
        fs;
    }
}

package R2 {
    fn r(){
        console;
    }
}

package R3 {
    fn r(){
        R2;
    }
}

module M(r: R1^{fs}, s: R3^{R2, console}){}

mut struct S { r: R1^{fs}, var s: R3^{r, R2, console} }

