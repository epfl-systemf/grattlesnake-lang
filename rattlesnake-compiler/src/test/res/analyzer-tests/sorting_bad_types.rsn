//> allow-more-errors
#nocap;

package Test {

    fn swap(array: arr Double, i1: Int, i2: String) -> Void {
        val tmp = array[i1];
        array[i1] = array[i2];  //> E : array index: expected 'Int', found 'String'
        array[i2] = tmp;
    }
    
    fn selectionSort(array: arr Int) {
        for var i = 0; i < len array; i += 1 {
            val maxIdx = me.maxIdx(array, i);
            me.swap(array, i, maxIdx)      //> E : expected 'arr Double', found 'arr Int'
        };
    }
    
    // returns the index of the maximal element of the array
    fn maxIdx(array: arr Int, firstIdx: Index) -> Int {         //> E : unknown: Index
        val t = new Baz(firstIndex);     //> E : not found: structure or module 'Baz'
        if len array == 0 {
            panic -1    //> E : panic: expected 'String', found 'Int'
        } else {
            var maxIdx: Int = firstIdx;
            for val length: Char = len array, var i = firstIdx + 1; i < length; i += 1 {  //> E@col=17 : local definition: expected 'Char', found 'Int'
                if array[i] > array[maxIdx] {
                    maxIdx = intToString(i);    //> E : expected 'Int', found 'String'
                }
            };
            return maxIdx
        }
    }
    
    main fn program(args: arr String) {
        val nbs = arr Fake[10];     //> E : unknown: Fake
        for var i = 0; i < 10; i += "1" {   //> E@col=32 : no definition of operator '+' found for operands 'Int' and 'String'
            nbs[i] = (2*i - i*i + 200) % 25;
            nbs[i] += 1;
        };
        selectionSort(["abcdefghijk"]); //> E@col=23 : expected 'arr Int', found 'arr String'
        for var i = 0; i < 10; i += 1 {
            print(intToString(nbs[i]));
            print(" ")
        }
    }

}
