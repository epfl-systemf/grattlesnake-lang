
package Test {

    fn test() {
        val lib1_1 = new Lib1();      // OK
        val lib1_2 = new Lib1();      // OK
        val r = newreg;
        val s = newreg;
        restricted {s, lib1_2} {
            new Lib1();             //> E : fs (imported by Lib1) is not allowed in the current module or restricted block
            val lib2 = new Lib2();  // OK
            lib1_1.doSomething();   //> E : lib1_1 is not allowed in the current module or restricted block
            lib1_2.doSomething();   // OK
            lib2.doSomething();     // OK
            fs.openR("sysroot");    //> E : fs is not allowed in the current module or restricted block
            new@s S(80);            // OK
            new@r S(90);            //> E : r is not allowed in the current module or restricted block
            console.readLine();     //> E : console is not allowed in the current module or restricted block
        }
    }

    fn myself() -> Test {
        return me;          //> E : returned value: expected 'Test', found 'Test^{console, fs}'
    }

}

module Lib1(device fs) {
    fn doSomething(){}
}

module Lib2() {
    fn doSomething(){}
}

mut struct S { i: Int }
