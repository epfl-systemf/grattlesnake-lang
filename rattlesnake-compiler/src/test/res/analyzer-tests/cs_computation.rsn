
package Abc {

    fn useFs() {
        fs;
    }

}

mut struct Foo {
    var t: Int
}

mut struct Bar {
    r: Region^,
    s: Region^,
    f1: Foo^{r},
    var f2: Foo^{s},
    var f3: Foo^{Abc, s},
    f4: Foo^{r, fs}
}

package Test {

    fn test() -> Bar^{fs} {
        val bar: Bar;               //> W : type is not inhabited: Bar should have a capture descriptor
        val r1 = newreg;
        val r2 = newreg;
        val foo1 = new@r1 Foo(42);
        val foo2 = new@r2 Foo(0);
        val foo3 = new@r2 Foo(75);
        val foo4 = new@r1 Foo(100);
        bar = new@r2 Bar(r1, r2, foo1, foo2, foo3, foo4); //> E : expected 'Bar', found 'Bar^{Abc, foo1, foo4, r1, r2}'
        return bar;
    }

}
